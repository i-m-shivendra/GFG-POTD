Bruteforce approach       TC-O(N^3)        SC-O(1)

class Solution {
  public:
    // Function to count the number of possible triangles.
    int countTriangles(vector<int>& arr) {
        int n=arr.size();
        int count=0;
        for(int i=0;i<n-2;i++)
        {
            for(int j=i+1;j<n-1;j++)
            {
                for(int k=j+1;k<n;k++)
                {
                    if(arr[i]+arr[j] > arr[k] &&
                       arr[j]+arr[k] > arr[i] &&
                       arr[i]+arr[k] > arr[j])
                       {
                           count++;
                       }
                }
            }
        }
        return count;
    }
};


Optimal Approach     TC-O(N^2)       SC-O(1)

class Solution {
  public:
    // Function to count the number of possible triangles.
    int countTriangles(vector<int>& arr) {
        int n=arr.size();
        sort(arr.begin(),arr.end());
        int count=0;
        for(int i=n-1;i>=2;i--)
        {
            int left=0;
            int right=i-1;
            while(left<=right)
            {
                if(arr[left]+arr[right]>arr[i])
                {
                    count = count + (right-left);
                    right--;
                }
                else
                {
                    left++;
                }
            }
        }
        return count;
    }
};
