Bruteforce approach    TC-O(n^2)   SC-O(1)

class Solution {
  public:
    int countPairs(vector<int> &arr, int target) {
        int n=arr.size();
        int count=0;
        for(int i=0;i<n-1;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if(arr[i]+arr[j]==target)
                {
                    count += 1;
                }
            }
        }
        return count;
    }
};

Optimal Approach     TC-O(N)   SC-O(1)

class Solution {
  public:
    int countPairs(vector<int> &arr, int target) {
        int ans=0;
        int n=arr.size();
        int start=0;
        int end=n-1;
        
        while(start<end)
        {
            if(arr[start]+arr[end]==target)
            {
                int count1=0;
                int count2=0;
                
                int left=arr[start];
                int right=arr[end];
                
            //Frequency of first elements of pair
                while(start<=end && arr[start]==left)
                {
                    start++;
                    count1++;
                }
            //Frequency of second elements of pair
                while(start<=end && arr[end]==right)
                {
                    end--;
                    count2++;
                }
                if(left==right)
                {
                    ans += (count1 * (count1-1))/2;
                }
                else
                {
                    ans += (count1*count2);
                }
            }
            else if(arr[start]+arr[end]<target)
            {
                start++;
            }
            else if(arr[start]+arr[end]>target)
            {
                end--;
            }
        }
        return ans;
    }
};
