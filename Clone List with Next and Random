/* Link list Node
struct Node {
    int data;
    Node *next;
    Node *random;

    Node(int x) {
        data = x;
        next = NULL;
        random = NULL;
    }
};*/

class Solution {
  public:
    // Utility to print the list (for debugging)
    void printList(Node* head) {
        Node* ptr = head;
        while (ptr != nullptr) {
            cout << ptr->data << " ";
            ptr = ptr->next;
        }
    }

    Node* cloneLinkedList(Node* head) {
        if (!head) return nullptr; // Edge case: Empty list

        Node* ptr = head;

        // Step 1: Interleave nodes
        while (ptr != nullptr) {
            Node* newNode = new Node(ptr->data);
            newNode->next = ptr->next;
            ptr->next = newNode;
            ptr = newNode->next; // Move to the next original node
        }

        // Step 2: Copy random pointers
        ptr = head;
        while (ptr != nullptr) {
            if (ptr->random)
                ptr->next->random = ptr->random->next;
            ptr = ptr->next->next; // Skip the new node to move to the next original node
        }

        // Step 3: Separate the cloned list
        ptr = head;
        Node* newHead = head->next;
        Node* newPtr = newHead;

        while (ptr != nullptr) {
            ptr->next = newPtr->next;
            ptr = ptr->next;
            if (newPtr->next)
                newPtr->next = newPtr->next->next;
            newPtr = newPtr->next;
        }

        return newHead; // Return the head of the cloned list
    }
};
